class Trie {
public:
    bool isLeaf;
    Trie* children[128];
    /** Initialize your data structure here. */
    Trie() {
        isLeaf = false;
        for(int i=0;i<128;i++)
            this->children[i] = nullptr;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie* curr = this;
        for(int i=0;i<word.length();i++)
        {  if(curr->children[word[i]] == nullptr)
                curr->children[word[i]]=new Trie();
                curr= curr->children[word[i]];
        }
        curr->isLeaf =true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        // if(this == nullptr)return false;
        Trie* curr = this;
        for(int i=0;i<word.length();i++){
            curr = curr->children[word[i]];
        if(curr == nullptr)return false; 
        }
        return curr->isLeaf;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
         // if(this == nullptr)return false;
        Trie* curr = this;
        for(int i=0;i<prefix.length();i++){
            curr = curr->children[prefix[i]];
        if(curr == nullptr)return false; 
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
