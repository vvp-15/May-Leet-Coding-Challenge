//Note: Your solution should run in O(log n) time and O(1) space.
//This note in ques easily suggests that binary search is to be used
// Modified binary search is used

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int l = 0,mid=-1, r = nums.size()-1;
        int n = nums.size();
        while(l<=r)
        {
             mid = l+(r-l)/2;
            if(mid<r && nums[mid] == nums[mid+1])
            {
                if((r-(mid+1))&1)
                {
                    l=mid+2;
                }
                else{
                    r=mid-1;
                }
                continue;
            }
            else if(mid>l && nums[mid]==nums[mid-1])
            {   
                if(((mid-1)-l)&1)
                    r=mid-2                                                                                                                                                                                           ;
                else l=mid+1;
                
                continue;
            }
            else break;
        }
        return nums[mid];
    }
};
